{"ast":null,"code":"import { Axios } from '../helpers/axios';\nimport { FETCHING_PRODUCTS, FETCHED_PRODUCTS } from '../store/constants'; // ThunkAction<(1), (2), (3), (4)>\n// (1) The return value of the internal async function that will be returned by this thunk\n// (2) The type of data being fired in the last action\n// (3) The type of the extra arguments passed to redux\n// (4) The last action to be dispatched.\n\nexport const fetchProducts = _ref => {\n  let {\n    search = ''\n  } = _ref;\n  return dispatch => {\n    dispatch({\n      type: FETCHING_PRODUCTS\n    });\n    return Axios.get(`products?search=${search}`).then(_ref2 => {\n      let {\n        data\n      } = _ref2;\n      return dispatch({\n        type: FETCHED_PRODUCTS,\n        products: data\n      });\n    });\n  };\n};","map":{"version":3,"sources":["/home/paras/jobs/testing/ecommerce/src/store/action-creators.ts"],"names":["Axios","FETCHING_PRODUCTS","FETCHED_PRODUCTS","fetchProducts","search","dispatch","type","get","then","data","products"],"mappings":"AAIA,SAASA,KAAT,QAAsB,kBAAtB;AAGA,SAASC,iBAAT,EAA4BC,gBAA5B,QAAoD,oBAApD,C,CAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,aAAa,GAAG,QASxB;AAAA,MATyB;AAC5BC,IAAAA,MAAM,GAAG;AADmB,GASzB;AACH,SAAQC,QAAD,IAAwB;AAC7BA,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEL;AADC,KAAD,CAAR;AAIA,WAAOD,KAAK,CAACO,GAAN,CAAW,mBAAkBH,MAAO,EAApC,EAAuCI,IAAvC,CACL;AAAA,UAAC;AAAEC,QAAAA;AAAF,OAAD;AAAA,aACEJ,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEJ,gBADC;AAEPQ,QAAAA,QAAQ,EAAED;AAFH,OAAD,CADV;AAAA,KADK,CAAP;AAOD,GAZD;AAaD,CAvBM","sourcesContent":["import { Dispatch } from 'redux'\nimport { AxiosResponse } from 'axios'\nimport { ThunkAction } from 'redux-thunk'\n\nimport { Axios } from '../helpers/axios'\nimport { Product } from '../types/Product'\nimport { FetchedProductsAction } from '../store/actions'\nimport { FETCHING_PRODUCTS, FETCHED_PRODUCTS } from '../store/constants'\n\n// ThunkAction<(1), (2), (3), (4)>\n// (1) The return value of the internal async function that will be returned by this thunk\n// (2) The type of data being fired in the last action\n// (3) The type of the extra arguments passed to redux\n// (4) The last action to be dispatched.\nexport const fetchProducts = ({\n  search = '',\n}: {\n  search: string\n}): ThunkAction<\n  Promise<FetchedProductsAction>,\n  Product[],\n  undefined,\n  FetchedProductsAction\n> => {\n  return (dispatch: Dispatch) => {\n    dispatch({\n      type: FETCHING_PRODUCTS,\n    })\n\n    return Axios.get(`products?search=${search}`).then(\n      ({ data }: AxiosResponse<Product[]>) =>\n        dispatch({\n          type: FETCHED_PRODUCTS,\n          products: data,\n        }),\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}