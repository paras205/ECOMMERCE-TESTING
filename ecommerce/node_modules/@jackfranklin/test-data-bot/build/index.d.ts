export interface SequenceGenerator<T> {
    generatorType: 'sequence';
    call: (counter: number) => T;
}
export interface PerBuildGenerator<T> {
    generatorType: 'perBuild';
    call: () => T;
}
export interface OneOfGenerator<T> {
    generatorType: 'oneOf';
    call: () => T;
}
export declare type FieldGenerator<T> = SequenceGenerator<T> | OneOfGenerator<T> | PerBuildGenerator<T>;
export declare type Field<T = any> = T | FieldGenerator<T> | FieldsConfiguration<T>;
export declare type FieldsConfiguration<FactoryResultType> = {
    readonly [Key in keyof FactoryResultType]: Field<FactoryResultType[Key]>;
};
export declare type Overrides<FactoryResultType = any> = {
    [Key in keyof FactoryResultType]?: Field<FactoryResultType[Key]>;
};
export interface BuildTimeConfig<FactoryResultType> {
    overrides?: Overrides<FactoryResultType>;
    map?: (builtThing: FactoryResultType) => FactoryResultType;
    traits?: string | string[];
}
export interface TraitsConfiguration<FactoryResultType> {
    readonly [traitName: string]: {
        overrides?: Overrides<FactoryResultType>;
        postBuild?: (builtThing: FactoryResultType) => FactoryResultType;
    };
}
export interface BuildConfiguration<FactoryResultType> {
    readonly fields: FieldsConfiguration<FactoryResultType>;
    readonly traits?: TraitsConfiguration<FactoryResultType>;
    readonly postBuild?: (x: FactoryResultType) => FactoryResultType;
}
export declare type ValueOf<T> = T[keyof T];
export declare const build: <FactoryResultType>(factoryNameOrConfig: string | BuildConfiguration<FactoryResultType>, configObject?: BuildConfiguration<FactoryResultType> | undefined) => (buildTimeConfig?: BuildTimeConfig<FactoryResultType> | undefined) => FactoryResultType;
export declare const oneOf: <T>(...options: T[]) => OneOfGenerator<T>;
export declare const bool: () => OneOfGenerator<boolean>;
declare type Sequence = {
    (): SequenceGenerator<number>;
    <T>(userProvidedFunction: (count: number) => T): SequenceGenerator<T>;
};
export declare const sequence: Sequence;
export declare const perBuild: <T>(func: () => T) => PerBuildGenerator<T>;
export {};
//# sourceMappingURL=index.d.ts.map